import { useState } from 'react';
import { Link } from 'react-router-dom';
import ReactMarkdown from 'react-markdown';

interface QuestionCardProps {
  question: {
    id: string;
    title: string;
    content: string;
    author: {
      id: string;
      username: string;
    };
    createdAt: string;
    _count: {
      answers: number;
      votes: number;
    };
    tags: {
      tag: {
        name: string;
      };
    }[];
  };
}

const QuestionCard = ({ question }: QuestionCardProps) => {
  const [votes, setVotes] = useState(question._count.votes);
  const [userVote, setUserVote] = useState<'up' | 'down' | null>(null);

  const handleVote = (type: 'up' | 'down') => {
    if (userVote === type) {
      setVotes((v: number) => v + (type === 'up' ? -1 : 1));
      setUserVote(null);
    } else {
      setVotes((v: number) => v + (type === 'up' ? 1 : -1) + (userVote ? (userVote === 'up' ? -1 : 1) : 0));
      setUserVote(type);
    }
  };

  return (
    <div className="bg-white rounded-lg shadow-md hover:shadow-lg transition-all duration-200">
      <div className="p-6 flex items-start space-x-6">
        {/* Votes */}
        <div className="flex flex-col items-center space-y-2 min-w-[60px]">
          <button 
            onClick={() => handleVote('up')}
            className={`p-2 rounded-full hover:bg-gray-100 transition-colors ${
              userVote === 'up' 
                ? 'text-blue-600 bg-blue-50' 
                : 'text-gray-400'
            }`}
            aria-label="Vote up"
          >
            ↑
          </button>
          <span className="text-xl font-semibold text-gray-900">{votes}</span>
          <button
            onClick={() => handleVote('down')}
            className={`p-2 rounded-full hover:bg-gray-100 transition-colors ${
              userVote === 'down' 
                ? 'text-red-600 bg-red-50' 
                : 'text-gray-400'
            }`}
            aria-label="Vote down"
          >
            ↓
          </button>
        </div>

        {/* Question Content */}
        <div className="flex-1 space-y-4">
          <Link to={`/question/${question.id}`} className="block group">
            <h2 className="text-xl font-semibold text-gray-900 group-hover:text-blue-600 transition-colors line-clamp-2">
              {question.title}
            </h2>
          </Link>
          
          <div className="prose prose-sm max-w-none text-gray-600 line-clamp-2">
            <ReactMarkdown>{question.content}</ReactMarkdown>
          </div>

          {/* Tags */}
          <div className="flex flex-wrap gap-2">
            {question.tags.map(({ tag }) => (
              <span
                key={tag.name}
                className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-blue-100 text-blue-800 hover:bg-blue-200 transition-colors"
              >
                {tag.name}
              </span>
            ))}
          </div>

          {/* Author & Stats */}
          <div className="pt-4 mt-4 border-t flex items-center justify-between text-sm">
            <div className="flex items-center space-x-3">
              <img 
                src={`https://ui-avatars.com/api/?name=${question.author.username}&background=random`}
                alt={question.author.username}
                className="w-6 h-6 rounded-full"
              />
              <div className="text-gray-600">
                <span>Asked by </span>
                <span className="font-medium text-gray-900">{question.author.username}</span>
                <span className="mx-2">•</span>
                <time className="text-gray-500" dateTime={question.createdAt}>
                  {new Date(question.createdAt).toLocaleDateString(undefined, {
                    year: 'numeric',
                    month: 'short',
                    day: 'numeric'
                  })}
                </time>
              </div>
            </div>
            <div className="flex items-center space-x-4">
              <div className="flex items-center text-gray-600">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-1" viewBox="0 0 20 20" fill="currentColor">
                  <path fillRule="evenodd" d="M18 10c0 3.866-3.582 7-8 7a8.841 8.841 0 01-4.083-.98L2 17l1.338-3.123C2.493 12.767 2 11.434 2 10c0-3.866 3.582-7 8-7s8 3.134 8 7zM7 9H5v2h2V9zm8 0h-2v2h2V9zM9 9h2v2H9V9z" clipRule="evenodd" />
                </svg>
                <span>{question._count.answers} answers</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default QuestionCard;
