generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  email     String    @unique
  username  String    @unique
  password  String
  questions Question[]
  answers   Answer[]
  votes     Vote[]
  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Question {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  author    User          @relation(fields: [authorId], references: [id])
  authorId  String        @db.ObjectId
  answers   Answer[]
  votes     Vote[]
  comments  Comment[]
  tags      QuestionTag[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Answer {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  content    String
  author     User      @relation(fields: [authorId], references: [id])
  authorId   String    @db.ObjectId
  question   Question  @relation(fields: [questionId], references: [id])
  questionId String    @db.ObjectId
  votes      Vote[]
  comments   Comment[]
  isAccepted Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Comment {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  content    String
  author     User      @relation(fields: [authorId], references: [id])
  authorId   String    @db.ObjectId
  question   Question? @relation(fields: [questionId], references: [id])
  questionId String?   @db.ObjectId
  answer     Answer?   @relation(fields: [answerId], references: [id])
  answerId   String?   @db.ObjectId
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Vote {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  value      Int       // 1 for upvote, -1 for downvote
  author     User      @relation(fields: [authorId], references: [id])
  authorId   String    @db.ObjectId
  question   Question? @relation(fields: [questionId], references: [id])
  questionId String?   @db.ObjectId
  answer     Answer?   @relation(fields: [answerId], references: [id])
  answerId   String?   @db.ObjectId
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@unique([authorId, questionId])
  @@unique([authorId, answerId])
}

model Tag {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  name      String        @unique
  questions QuestionTag[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

// Pivot table for Question <-> Tag
model QuestionTag {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  question   Question  @relation(fields: [questionId], references: [id])
  questionId String    @db.ObjectId
  tag        Tag       @relation(fields: [tagId], references: [id])
  tagId      String    @db.ObjectId
  createdAt  DateTime  @default(now())

  @@unique([questionId, tagId])
}
