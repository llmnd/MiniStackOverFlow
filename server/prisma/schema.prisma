// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  username  String    @unique
  password  String
  questions Question[]
  answers   Answer[]
  votes     Vote[]
  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Question {
  id        String    @id @default(cuid())
  title     String
  content   String
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  answers   Answer[]
  votes     Vote[]
  comments  Comment[]
  tags      Tag[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Answer {
  id         String    @id @default(cuid())
  content    String
  author     User      @relation(fields: [authorId], references: [id])
  authorId   String
  question   Question  @relation(fields: [questionId], references: [id])
  questionId String
  votes      Vote[]
  comments   Comment[]
  isAccepted Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Comment {
  id         String    @id @default(cuid())
  content    String
  author     User      @relation(fields: [authorId], references: [id])
  authorId   String
  question   Question? @relation(fields: [questionId], references: [id])
  questionId String?
  answer     Answer?   @relation(fields: [answerId], references: [id])
  answerId   String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Vote {
  id         String    @id @default(cuid())
  value      Int       // 1 for upvote, -1 for downvote
  author     User      @relation(fields: [authorId], references: [id])
  authorId   String
  question   Question? @relation(fields: [questionId], references: [id])
  questionId String?
  answer     Answer?   @relation(fields: [answerId], references: [id])
  answerId   String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@unique([authorId, questionId])
  @@unique([authorId, answerId])
}

model Tag {
  id        String     @id @default(cuid())
  name      String     @unique
  questions Question[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}
